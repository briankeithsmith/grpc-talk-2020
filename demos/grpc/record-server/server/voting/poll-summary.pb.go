// Code generated by protoc-gen-go. DO NOT EDIT.
// source: poll-summary.proto

package voting

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PollOptionSummary struct {
	Option               *Option  `protobuf:"bytes,1,opt,name=Option,proto3" json:"Option,omitempty"`
	VoteCounts           int32    `protobuf:"varint,2,opt,name=VoteCounts,proto3" json:"VoteCounts,omitempty"`
	Ratio                float32  `protobuf:"fixed32,3,opt,name=Ratio,proto3" json:"Ratio,omitempty"`
	Rank                 int32    `protobuf:"varint,4,opt,name=Rank,proto3" json:"Rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PollOptionSummary) Reset()         { *m = PollOptionSummary{} }
func (m *PollOptionSummary) String() string { return proto.CompactTextString(m) }
func (*PollOptionSummary) ProtoMessage()    {}
func (*PollOptionSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce39fd6f55b4c338, []int{0}
}

func (m *PollOptionSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollOptionSummary.Unmarshal(m, b)
}
func (m *PollOptionSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollOptionSummary.Marshal(b, m, deterministic)
}
func (m *PollOptionSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOptionSummary.Merge(m, src)
}
func (m *PollOptionSummary) XXX_Size() int {
	return xxx_messageInfo_PollOptionSummary.Size(m)
}
func (m *PollOptionSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOptionSummary.DiscardUnknown(m)
}

var xxx_messageInfo_PollOptionSummary proto.InternalMessageInfo

func (m *PollOptionSummary) GetOption() *Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *PollOptionSummary) GetVoteCounts() int32 {
	if m != nil {
		return m.VoteCounts
	}
	return 0
}

func (m *PollOptionSummary) GetRatio() float32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *PollOptionSummary) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type PollSummary struct {
	Poll                 *Poll                `protobuf:"bytes,1,opt,name=Poll,proto3" json:"Poll,omitempty"`
	TotalVotes           int32                `protobuf:"varint,2,opt,name=TotalVotes,proto3" json:"TotalVotes,omitempty"`
	Options              []*PollOptionSummary `protobuf:"bytes,3,rep,name=Options,proto3" json:"Options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PollSummary) Reset()         { *m = PollSummary{} }
func (m *PollSummary) String() string { return proto.CompactTextString(m) }
func (*PollSummary) ProtoMessage()    {}
func (*PollSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce39fd6f55b4c338, []int{1}
}

func (m *PollSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PollSummary.Unmarshal(m, b)
}
func (m *PollSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PollSummary.Marshal(b, m, deterministic)
}
func (m *PollSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollSummary.Merge(m, src)
}
func (m *PollSummary) XXX_Size() int {
	return xxx_messageInfo_PollSummary.Size(m)
}
func (m *PollSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_PollSummary.DiscardUnknown(m)
}

var xxx_messageInfo_PollSummary proto.InternalMessageInfo

func (m *PollSummary) GetPoll() *Poll {
	if m != nil {
		return m.Poll
	}
	return nil
}

func (m *PollSummary) GetTotalVotes() int32 {
	if m != nil {
		return m.TotalVotes
	}
	return 0
}

func (m *PollSummary) GetOptions() []*PollOptionSummary {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterType((*PollOptionSummary)(nil), "voting.summary.PollOptionSummary")
	proto.RegisterType((*PollSummary)(nil), "voting.summary.PollSummary")
}

func init() { proto.RegisterFile("poll-summary.proto", fileDescriptor_ce39fd6f55b4c338) }

var fileDescriptor_ce39fd6f55b4c338 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xd9, 0x26, 0x8d, 0x32, 0x91, 0x42, 0xd7, 0x0a, 0xa1, 0x82, 0xc4, 0x5e, 0xcc, 0xa5,
	0x8b, 0xc4, 0xa3, 0xb7, 0x7a, 0xe8, 0x51, 0xd9, 0x48, 0x0f, 0xde, 0x56, 0x5d, 0x24, 0xb8, 0xc9,
	0x84, 0x64, 0x5b, 0xf0, 0x1d, 0xbc, 0xf9, 0x08, 0xbe, 0xa8, 0xec, 0x9f, 0x68, 0xd5, 0xde, 0x7a,
	0xdb, 0xf9, 0xbe, 0x6f, 0x66, 0x7e, 0xcc, 0x02, 0x6d, 0x50, 0xa9, 0x79, 0xb7, 0xae, 0x2a, 0xd1,
	0xbe, 0xb1, 0xa6, 0x45, 0x8d, 0x74, 0xb4, 0x41, 0x5d, 0xd6, 0x2f, 0xcc, 0xab, 0xd3, 0xa3, 0x0a,
	0x9f, 0xa5, 0xea, 0x9c, 0x3b, 0x7b, 0x27, 0x30, 0xbe, 0x43, 0xa5, 0x6e, 0x1b, 0x5d, 0x62, 0x5d,
	0xb8, 0x0c, 0x9d, 0x43, 0xe4, 0x84, 0x84, 0xa4, 0x24, 0x8b, 0xf3, 0x13, 0xe6, 0x87, 0xf8, 0x5e,
	0x67, 0x72, 0x1f, 0xa2, 0x67, 0x00, 0x2b, 0xd4, 0xf2, 0x06, 0xd7, 0xb5, 0xee, 0x92, 0x41, 0x4a,
	0xb2, 0x21, 0xdf, 0x52, 0xe8, 0x04, 0x86, 0x5c, 0xe8, 0x12, 0x93, 0x20, 0x25, 0xd9, 0x80, 0xbb,
	0x82, 0x52, 0x08, 0xb9, 0xa8, 0x5f, 0x93, 0xd0, 0xe6, 0xed, 0x7b, 0xf6, 0x41, 0x20, 0x36, 0x38,
	0x3d, 0xc8, 0x05, 0x84, 0xa6, 0xf4, 0x18, 0xc7, 0x7f, 0x30, 0x8c, 0xc5, 0x6d, 0xc0, 0x20, 0xdc,
	0xa3, 0x16, 0xca, 0x6c, 0xfd, 0x46, 0xf8, 0x51, 0xe8, 0x35, 0x1c, 0x38, 0xd8, 0x2e, 0x09, 0xd2,
	0x20, 0x8b, 0xf3, 0x73, 0xf6, 0xfb, 0x2e, 0xec, 0xdf, 0x15, 0x78, 0xdf, 0x91, 0x7f, 0x12, 0x98,
	0xac, 0x6c, 0xda, 0x5b, 0x85, 0x6c, 0x37, 0xe5, 0x93, 0xa4, 0x0b, 0x18, 0x2d, 0xa5, 0xde, 0x06,
	0xde, 0x85, 0x38, 0x3d, 0xdd, 0xb5, 0xab, 0xef, 0x58, 0xc2, 0xb8, 0xd0, 0xad, 0x14, 0xd5, 0x5e,
	0x63, 0x2e, 0xc9, 0xe2, 0xf0, 0x21, 0x72, 0xfe, 0x63, 0x64, 0xff, 0xf6, 0xea, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x7c, 0x83, 0xa3, 0x5d, 0x0f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VotingSummaryServiceClient is the client API for VotingSummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VotingSummaryServiceClient interface {
	GetPollSummary(ctx context.Context, in *Poll, opts ...grpc.CallOption) (*PollSummary, error)
	StreamPollSummary(ctx context.Context, in *Poll, opts ...grpc.CallOption) (VotingSummaryService_StreamPollSummaryClient, error)
}

type votingSummaryServiceClient struct {
	cc *grpc.ClientConn
}

func NewVotingSummaryServiceClient(cc *grpc.ClientConn) VotingSummaryServiceClient {
	return &votingSummaryServiceClient{cc}
}

func (c *votingSummaryServiceClient) GetPollSummary(ctx context.Context, in *Poll, opts ...grpc.CallOption) (*PollSummary, error) {
	out := new(PollSummary)
	err := c.cc.Invoke(ctx, "/voting.summary.VotingSummaryService/GetPollSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingSummaryServiceClient) StreamPollSummary(ctx context.Context, in *Poll, opts ...grpc.CallOption) (VotingSummaryService_StreamPollSummaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VotingSummaryService_serviceDesc.Streams[0], "/voting.summary.VotingSummaryService/StreamPollSummary", opts...)
	if err != nil {
		return nil, err
	}
	x := &votingSummaryServiceStreamPollSummaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VotingSummaryService_StreamPollSummaryClient interface {
	Recv() (*PollSummary, error)
	grpc.ClientStream
}

type votingSummaryServiceStreamPollSummaryClient struct {
	grpc.ClientStream
}

func (x *votingSummaryServiceStreamPollSummaryClient) Recv() (*PollSummary, error) {
	m := new(PollSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VotingSummaryServiceServer is the server API for VotingSummaryService service.
type VotingSummaryServiceServer interface {
	GetPollSummary(context.Context, *Poll) (*PollSummary, error)
	StreamPollSummary(*Poll, VotingSummaryService_StreamPollSummaryServer) error
}

// UnimplementedVotingSummaryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVotingSummaryServiceServer struct {
}

func (*UnimplementedVotingSummaryServiceServer) GetPollSummary(ctx context.Context, req *Poll) (*PollSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPollSummary not implemented")
}
func (*UnimplementedVotingSummaryServiceServer) StreamPollSummary(req *Poll, srv VotingSummaryService_StreamPollSummaryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPollSummary not implemented")
}

func RegisterVotingSummaryServiceServer(s *grpc.Server, srv VotingSummaryServiceServer) {
	s.RegisterService(&_VotingSummaryService_serviceDesc, srv)
}

func _VotingSummaryService_GetPollSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Poll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingSummaryServiceServer).GetPollSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.summary.VotingSummaryService/GetPollSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingSummaryServiceServer).GetPollSummary(ctx, req.(*Poll))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingSummaryService_StreamPollSummary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Poll)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VotingSummaryServiceServer).StreamPollSummary(m, &votingSummaryServiceStreamPollSummaryServer{stream})
}

type VotingSummaryService_StreamPollSummaryServer interface {
	Send(*PollSummary) error
	grpc.ServerStream
}

type votingSummaryServiceStreamPollSummaryServer struct {
	grpc.ServerStream
}

func (x *votingSummaryServiceStreamPollSummaryServer) Send(m *PollSummary) error {
	return x.ServerStream.SendMsg(m)
}

var _VotingSummaryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "voting.summary.VotingSummaryService",
	HandlerType: (*VotingSummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPollSummary",
			Handler:    _VotingSummaryService_GetPollSummary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPollSummary",
			Handler:       _VotingSummaryService_StreamPollSummary_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "poll-summary.proto",
}
